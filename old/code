
        self.wanConnIpChecker = None
        self.wanConnIpCheckRestartTimer = None
        self.wanConnIpIsPublic = None

    def _wconnIpCheckStart(self):
        assert self.wanConnIpChecker is None
        self.wanConnIpChecker = UrlOpenAsync("https://ipinfo.io/ip", self._wconnIpCheckComplete, self._wconnIpCheckError)
        self.wanConnIpChecker.start()

    def _wconnIpCheckComplete(self, ip):
        internetIpList = []
        for ifc in self.ifconfigDict.values():
            if "internet-ip" in ifc:
                internetIpList.append(ifc["internet-ip"])

        self.wanConnIpIsPublic = (ip in internetIpList)
        self.logger.info("Internet IP (%s) check complete, %s IP" % (ip, "Public" if self.wanConnIpIsPublic else "NATed"))
        self.wanConnIpChecker = None
        self.param.managerCaller.call("on_wan_ipcheck_complete", self.wanConnIpIsPublic)

    def _wconnIpCheckError(self, returncode, msg):
        internetIpList = []
        for ifc in self.ifconfigDict.values():
            if "internet-ip" in ifc:
                internetIpList.append(ifc["internet-ip"])

        self.logger.info("Internet IP check failed, retry in 10 seconds")
        self.wanConnIpChecker = None
        self.wanConnIpCheckRestartTimer = GObject.timeout_add_seconds(10, self._wconnIpCheckTimerCallback)     # restart check after 10 seconds

    def _wconnIpCheckTimerCallback(self):
        try:
            self._wconnIpCheckStart()
            self.wanConnIpCheckRestartTimer = None
        except BaseException:
            self.logger.error("Error occured in wan connection ip check timer callback", exc_info=True)
        finally:
            return False

    def _wconnIpCheckDispose(self):
        self.wanConnIpIsPublic = None
        if self.wanConnIpCheckRestartTimer is not None:
            GLib.source_remove(self.wanConnIpCheckRestartTimer)
            self.wanConnIpCheckRestartTimer = None
        if self.wanConnIpChecker is not None:
            self.wanConnIpChecker.cancel()
            self.wanConnIpChecker = None



#   (suggested_filename:str,content:str,warn_msg:str-list)   GenerateClientScript(lif_plugin_id:str, os_type:str)


    @dbus.service.method('org.fpemud.WRT', in_signature='ss', out_signature='ssas')
    def GenerateClientScript(self, vpns_plugin_full_name, os_type):
        if os_type not in ["linux", "win32"]:
            raise Exception("Invalid OS type.")

        pluginObj = None
        for po in self.param.lanManager.vpnsPluginList:
            if po.full_name == vpns_plugin_full_name:
                pluginObj = po
                break
        if pluginObj is None:
            raise Exception("The specified plugin does not exist.")

        if self.param.dnsName is not None:
            suggested_filename, content = pluginObj.generate_client_script(self.param.dnsName, os_type)
            if not self.param.wanManager.is_connected():
                return (suggested_filename, content, ["Domain name %s is not validated." % (self.param.dnsName)])
            elif socket.gethostbyname(self.param.dnsName) != self.param.wanManager.get_ip():
                return (suggested_filename, content, ["Domain name %s does not resolve to WAN IP address \"%s\"." % (self.param.dnsName, self.param.wanManager.get_ip())])
            else:
                return (suggested_filename, content, [])
        else:
            if not self.param.wanManager.is_connected():
                raise Exception("No internet connection.")
            ip = self.param.wanManager.get_ip()
            msgList = ["No domain name specified, using WAN IP address %s as cloud server address." % (ip)]
            if self.param.wanManager.wanConnIpIsPublic is None:
                msgList.append("Internet connection IP address publicity checking is in progress.")
            elif not self.param.wanManager.wanConnIpIsPublic:
                msgList.append("Internet connection IP address is not public.")
            suggested_filename, content = pluginObj.generate_client_script(ip, os_type)
            return (suggested_filename, content, msgList)



    def generate_client_script(self, wan_ip, os_type):
        # returns (suggested-script-filename, script-content)
        assert False



        if os.path.exists(self.cfgFile):
            cfgObj = WrtUtil.loadJsonEtcCfg(self.cfgFile)
            self.param.dnsName = cfgObj["dns-name"]


        # check dns name
        if self.param.dnsName is not None:
            internetIpList = []
            for ifc in self.ifconfigDict.values():
                if "internet-ip" in ifc:
                    internetIpList.append(ifc["internet-ip"])
            if socket.gethostbyname(self.param.dnsName) not in internetIpList:
                self.logger.warn("Invalid DNS name %s." % (self.param.dnsName))

