#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import glob
import dbus
import json
import shutil
import socket
import subprocess
import logging
from wrt_util import WrtUtil
from wrt_api_server import WrtApiServer


class WrtLanManager:

    def __init__(self, param):
        self.param = param
        self.pluginList = []

        # create bridge interface
        WrtUtil.addBridge(self.param.brname)
        WrtUtil.setInterfaceUpDown(self.param.brname, True)
        WrtUtil.shell('/bin/ifconfig "%s" "%s" netmask "%s"' % (self.param.brname, self.param.ip, self.param.mask))
        logging.info("LAN: Bridge interface \"%s\" created with IP address %s/%s." % (self.param.brname, self.param.ip, self.param.mask))

        # start dnsmasq
        self._runDnsmasq()
        with open("/etc/resolv.conf", "w") as f:
            f.write("# Generated by wrtd\n")
            f.write("nameserver 127.0.0.1\n")
        logging.info("LAN: Dnsmasq started.")

        # start SGW-API server
        self.apiServer = WrtApiServer(self.param)
        logging.info("LAN: SGW-API server started.")

        # start all lan interface plugins
        for name in self.param.pluginManager.getLanInterfacePluginList(self.param):
            tlist = []
            for fn in glob.glob(os.path.join(self.param.etcDir, "lan-interface-%s*.json" % (name))):
                bn = os.path.basename(fn)
                instanceName = bn[len("lan-interface-%s" % (name)):len(".json") * -1]
                if instanceName != "":
                    instanceName = instanceName.lstrip("-")
                tlist.append((instanceName, fn))
            if len(tlist) == 0:
                tlist.append(("", None))

            for instanceName, cfgFile in tlist:
                cfgObj = dict()
                if cfgFile is not None:
                    with open(cfgFile, "r") as f:
                        cfgObj = json.load(f)

                tdir = os.path.join(self.param.tmpDir, "lif-%s" % (name))
                if instanceName != "":
                    tdir += "-%s" % (instanceName)
                os.mkdir(tdir)

                pi = WrtLanPluginInfo()
                pi.obj = self.param.pluginManager.getLanInterfacePlugin(name)
                pi.intfList = []
                self.pluginList.append(pi)

                pi.obj.init2(instanceName, cfgObj, self.param.brname, tdir)
                pi.obj.start()

        # add CGFW nat rules
        ret = self._addCgfwNatRules()
        if ret:
            logging.info("LAN: CGFW NAT rules added.")

        # listen to CGFW event
        dbus.SystemBus().add_signal_receiver(self._cgfwVpnConnected,
                                             signal_name="VpnConnected", dbus_interface="org.fpemud.CGFW",
                                             bus_name="org.fpemud.CGFW", path="/org/fpemud/CGFW")
        logging.info("LAN: CGFW event listener registered.")

    def dispose(self):
        with open("/etc/resolv.conf", "w") as f:
            f.write("")
        self._removeCgfwNatRules()
        for pi in self.pluginList:
            pi.stop()
        self.apiServer.dispose()
        self._stopDnsmasq()
        WrtUtil.setInterfaceUpDown(self.param.brname, False)
        WrtUtil.removeBridge(self.param.brname)
        logging.info("LAN: Terminated.")

    def getInterfaceList(self):
        ret = []
        for pi in self.pluginList:
            ret += pi.intfList
        return ret

    def _cgfwVpnConnected(self, bFirstTime):
        if bFirstTime:
            logging.info("CGFW VPN connected.")
            self._removeCgfwNatRules()
            self._stopDnsmasq()
            self._runDnsmasq()
            self._addCgfwNatRules()
        else:
            self._removeCgfwNatRules()
            self._addCgfwNatRules()
            logging.info("CGFW VPN re-connected.")

    def _addCgfwNatRules(self):
        self.cgfwNatRuleHandle = None
        try:
            dbusObj = dbus.SystemBus().get_object('org.fpemud.CGFW', '/org/fpemud/CGFW')
            cgfwInterface = dbusObj.GetInterface()
            self.cgfwNatRuleHandle = WrtUtil.nftAddRule("wrtd", "natpost", "oif \"%s\" masquerade" % (cgfwInterface))
            return True
        except:
            return False

    def _removeCgfwNatRules(self):
        if self.cgfwNatRuleHandle is not None:
            WrtUtil.nftDeleteRule("wrtd", "natpost", self.cgfwNatRuleHandle)
            self.cgfwNatRuleHandle = None

    def _runDnsmasq(self):
        # myhostname file
        myhostnameFile = os.path.join(self.param.tmpDir, "dnsmasq.myhostname")
        with open(myhostnameFile, "w") as f:
            f.write("%s %s\n" % (self.param.ip, socket.gethostname()))

        # make hosts directory
        hostsDir = os.path.join(self.param.tmpDir, "hosts.d")
        os.mkdir(hostsDir)

        # create empty leases file
        leasesFile = os.path.join(self.param.tmpDir, "dnsmasq.leases")
        with open(leasesFile, "w") as f:
            f.write("")

        # generate dnsmasq config file
        buf = ""
        buf += "strict-order\n"
        buf += "bind-interfaces\n"                            # don't listen on 0.0.0.0
        buf += "interface=%s\n" % (self.param.brname)
        buf += "user=root\n"
        buf += "group=root\n"
        buf += "\n"
        buf += "dhcp-authoritative\n"
        buf += "dhcp-range=%s,%s,%s,360\n" % (self.param.dhcpRange[0], self.param.dhcpRange[1], self.param.mask)
        buf += "dhcp-option=option:T1,180\n"                                    # strange that dnsmasq's T1=165s, change to 180s which complies to RFC
        buf += "dhcp-leasefile=%s\n" % (leasesFile)
        buf += "\n"
        buf += "domain-needed\n"
        buf += "bogus-priv\n"
        buf += "no-hosts\n"
        buf += "resolv-file=%s\n" % (self.param.ownResolvConf)
        buf += "addn-hosts=%s\n" % (hostsDir)                       # "hostsdir=" only adds record, no deletion, so not usable
        buf += "addn-hosts=%s\n" % (myhostnameFile)                 # we use addn-hosts which has no inotify, and we send SIGHUP to dnsmasq when host file changes
        buf += "addn-hosts=%s\n" % ("/usr/share/cgfw/hosts.d")      # fixme
        try:
            s = "\n"
            dbusObj = dbus.SystemBus().get_object('org.fpemud.CGFW', '/org/fpemud/CGFW')
            domainList = dbusObj.GetDomainList()
            nsList = dbusObj.GetNameServerList()
            for domain in domainList:
                for ns in nsList:
                    s += "server=/%s/%s\n" % (domain, ns)
            buf += s
        except:
            pass
        buf += "\n"
        cfgf = os.path.join(self.param.tmpDir, "dnsmasq.conf")
        with open(cfgf, "w") as f:
            f.write(buf)

        # run dnsmasq process
        cmd = "/usr/sbin/dnsmasq"
        cmd += " --keep-in-foreground"
        cmd += " --conf-file=\"%s\"" % (cfgf)
        cmd += " --pid-file=%s" % (os.path.join(self.param.tmpDir, "dnsmasq.pid"))
        self.dnsmasqProc = subprocess.Popen(cmd, shell=True, universal_newlines=True)

    def _stopDnsmasq(self):
        if self.dnsmasqProc is not None:
            self.dnsmasqProc.terminate()
            self.dnsmasqProc.wait()
            self.dnsmasqProc = None
        shutil.rmtree(os.path.join(self.param.tmpDir, "hosts.d"))


class WrtLanPluginInfo:

    def __init__(self):
        self.obj = None
        self.intfList = []
