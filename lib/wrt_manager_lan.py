#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import dbus
import shutil
import socket
import netifaces
import subprocess
import logging
from wrt_util import WrtUtil
from wrt_api_server import WrtApiServer


class WrtLanManager:

    def __init__(self, param):
        self.param = param
        self.wifiNetworks = []

        # load config
        cfgfile = os.path.join(self.param.etcDir, "lan-wifi.json")
        if os.path.exists(cfgFile):
            with open(self.param.cfgFile, "r") as f:
                for o in json.load(f):
                    t = WrtConfigWifiNetwork()
                    t.ssid = o["ssid"]
                    if "password" in o:
                        t.password = o["password"]
                    else:
                        t.password = ""
                    self.wifiNetworks.append(t)

        # get all LAN interfaces
        self.intfList = netifaces.interfaces()
        self.intfList = [x for x in self.intfList if x.startswith("en") or x.startswith("wl")]
        if hasattr(self.param.wanManager, "wanConnPlugin"):
            self.intfList.remove(self.param.wanManager.wanConnPlugin.getOutInterface())
        logging.info("LAN: Got all LAN interfaces [%s]." % (", ".join(self.intfList)))

        # create bridge interface
        if True:
            WrtUtil.shell('/sbin/brctl addbr "%s"' % (self.param.brname))
            WrtUtil.shell('/bin/ifconfig "%s" up' % (self.param.brname))
            WrtUtil.shell('/bin/ifconfig "%s" "%s" netmask "%s"' % (self.param.brname, self.param.ip, self.param.mask))
        logging.info("LAN: Bridge interface \"%s\" created with IP address %s/%s." % (self.param.brname, self.param.ip, self.param.mask))

        # add all non-wlan interfaces into bridge
        # start hostapd for all wlan interfaces, hostapd would add all wlan interface into bridge
        for ifname in self.intfList:
            if ifname.startswith("en"):
                WrtUtil.shell('/bin/ifconfig "%s" up' % (ifname))
                WrtUtil.shell('/sbin/brctl addif "%s" "%s"' % (self.param.brname, ifname))
        self._runHostapd()
        logging.info("LAN: HostAPd started.")

        # start dnsmasq
        self._runDnsmasq()
        with open("/etc/resolv.conf", "w") as f:
            f.write("# Generated by wrtd\n")
            f.write("nameserver 127.0.0.1\n")
        logging.info("LAN: Dnsmasq started.")

        # start SGW-API server
        self.apiServer = WrtApiServer(self.param)
        logging.info("LAN: SGW-API server started.")

        # add CGFW nat rules
        ret = self._addCgfwNatRules()
        if ret:
            logging.info("LAN: CGFW NAT rules added.")

        # listen to CGFW event
        dbus.SystemBus().add_signal_receiver(self._cgfwVpnConnected,
                                             signal_name="VpnConnected", dbus_interface="org.fpemud.CGFW",
                                             bus_name="org.fpemud.CGFW", path="/org/fpemud/CGFW")
        logging.info("LAN: CGFW event listener registered.")

    def dispose(self):
        with open("/etc/resolv.conf", "w") as f:
            f.write("")
        self._removeCgfwNatRules()
        self.apiServer.dispose()
        self._stopDnsmasq()
        self._stopHostapd()
        WrtUtil.shell('/bin/ifconfig "%s" down' % (self.param.brname), "retcode+stdout")
        WrtUtil.shell('/sbin/brctl delbr "%s"' % (self.param.brname), "retcode+stdout")
        logging.info("LAN: Terminated.")

    def getInterfaceList(self):
        return self.intfList

    def _cgfwVpnConnected(self, bFirstTime):
        if bFirstTime:
            logging.info("CGFW VPN connected.")
            self._removeCgfwNatRules()
            self._stopDnsmasq()
            self._runDnsmasq()
            self._addCgfwNatRules()
        else:
            self._removeCgfwNatRules()
            self._addCgfwNatRules()
            logging.info("CGFW VPN re-connected.")

    def _runHostapd(self):
        if len(self.wifiNetworks) == 0:
            return

        wlanIntfList = [x for x in self.intfList if x.startswith("wl")]
        if len(wlanIntfList) == 0:
            return
        wlanIntfList = self._sortWlanIntfList(wlanIntfList)

        for i in range(0, len(wlanIntfList)):
            wlanIntf = wlanIntfList[0]

            # generate hostapd configuration file
            buf = ""
            buf += "interface=%s\n" % (wlanIntf)
            buf += "bridge=%s\n" % (self.param.brname)
            buf += "\n"
            buf += "# hardware related configuration\n"
            buf += self._genWlanAdapterHwCfg(wlanIntf, True if i == 0 else False)
            buf += "\n"
            for j in range(0, len(self.wifiNetworks)):
                wifiNet = self.wifiNetworks[j]
                buf += "# AP %d\n" % (j + 1)
                if j > 0:
                    buf += "bss=%s.%d" % (wlanIntf, j + 1)      # new interface that hostapd will create for this AP
                buf += "ssid=%s\n" % (wifiNet.ssid)
                if wifiNet.password != "":
                    buf += "auth_algs=1\n"                      # WPA only, WEP disallowed
                    buf += "wpa=2\n"                            # WPA2 only
                    buf += "wpa_key_mgmt=WPA-PSK\n"
                    buf += "rsn_pairwise=CCMP\n"
                    buf += "wpa_passphrase=%s\n" % (wifiNet.password)
            buf += "\n"
            buf += "eap_server=0\n"

            # write to hostapd configuration file
            cfgFile = os.path.join(self.param.tmpDir, "hostapd-%s.conf" % (wlanIntf))
            with open(cfgFile, "w") as f:
                f.write(buf)

        # run hostapd process
        cmd = "/usr/sbin/hostapd"
        cmd += " -P %s" % (os.path.join(self.param.tmpDir, "hostapd-%s.pid" % (wlanIntf)))
        cmd += " %s" % (os.path.join(self.param.tmpDir, "hostapd-*.conf"))
        self.hostapdProc = subprocess.Popen(cmd, shell=True, universal_newlines=True)

    def _stopHostapd(self):
        if self.hostapdProc is not None:
            self.hostapdProc.terminate()
            self.hostapdProc.wait()
            self.hostapdProc = None
        WrtUtil.shell("/bin/rm -f %s/hostapd-*" % (self.param.tmpDir))

    def _sortWlanIntfList(self, wlanIntfList):
        return wlanIntfList

    def _genWlanAdapterHwCfg(self, wlanIntf, highOrLow):
        buf = ""
        buf += "driver=nl80211\n"
        # if highOrLow:
        #     buf += "hw_mode=a\n"                        # 5GHz
        # else:
        #     buf += "hw_mode=g\n"                        # 2.4GHz
        if True:
            buf += "hw_mode=g\n"                        # 2.4GHz
            buf += "channel=1\n"                        # it sucks that channel=0 (ACS) has bug
        buf += "ieee80211n=1\n"
        buf += "ieee80211ac=1\n"
        buf += "wmm_enabled=1\n"
        return buf

    def _addCgfwNatRules(self):
        self.cgfwNatRuleHandle = None
        try:
            dbusObj = dbus.SystemBus().get_object('org.fpemud.CGFW', '/org/fpemud/CGFW')
            cgfwInterface = dbusObj.GetInterface()
            self.cgfwNatRuleHandle = WrtUtil.nftAddRule("wrtd", "natpost", "oif \"%s\" masquerade" % (cgfwInterface))
            return True
        except:
            return False

    def _removeCgfwNatRules(self):
        if self.cgfwNatRuleHandle is not None:
            WrtUtil.nftDeleteRule("wrtd", "natpost", self.cgfwNatRuleHandle)
            self.cgfwNatRuleHandle = None

    def _runDnsmasq(self):
        # myhostname file
        myhostnameFile = os.path.join(self.param.tmpDir, "dnsmasq.myhostname")
        with open(myhostnameFile, "w") as f:
            f.write("%s %s\n" % (self.param.ip, socket.gethostname()))

        # make hosts directory
        hostsDir = os.path.join(self.param.tmpDir, "hosts.d")
        os.mkdir(hostsDir)

        # create empty leases file
        leasesFile = os.path.join(self.param.tmpDir, "dnsmasq.leases")
        with open(leasesFile, "w") as f:
            f.write("")

        # generate dnsmasq config file
        buf = ""
        buf += "strict-order\n"
        buf += "bind-interfaces\n"                            # don't listen on 0.0.0.0
        buf += "interface=%s\n" % (self.param.brname)
        buf += "user=root\n"
        buf += "group=root\n"
        buf += "\n"
        buf += "dhcp-authoritative\n"
        buf += "dhcp-range=%s,%s,%s,360\n" % (self.param.dhcpRange[0], self.param.dhcpRange[1], self.param.mask)
        buf += "dhcp-option=option:T1,180\n"                                    # strange that dnsmasq's T1=165s, change to 180s which complies to RFC
        buf += "dhcp-leasefile=%s\n" % (leasesFile)
        buf += "\n"
        buf += "domain-needed\n"
        buf += "bogus-priv\n"
        buf += "no-hosts\n"
        buf += "resolv-file=%s\n" % (self.param.ownResolvConf)
        buf += "addn-hosts=%s\n" % (hostsDir)                       # "hostsdir=" only adds record, no deletion, so not usable
        buf += "addn-hosts=%s\n" % (myhostnameFile)                 # we use addn-hosts which has no inotify, and we send SIGHUP to dnsmasq when host file changes
        buf += "addn-hosts=%s\n" % ("/usr/share/cgfw/hosts.d")      # fixme
        try:
            s = "\n"
            dbusObj = dbus.SystemBus().get_object('org.fpemud.CGFW', '/org/fpemud/CGFW')
            domainList = dbusObj.GetDomainList()
            nsList = dbusObj.GetNameServerList()
            for domain in domainList:
                for ns in nsList:
                    s += "server=/%s/%s\n" % (domain, ns)
            buf += s
        except:
            pass
        buf += "\n"
        cfgf = os.path.join(self.param.tmpDir, "dnsmasq.conf")
        with open(cfgf, "w") as f:
            f.write(buf)

        # run dnsmasq process
        cmd = "/usr/sbin/dnsmasq"
        cmd += " --keep-in-foreground"
        cmd += " --conf-file=\"%s\"" % (cfgf)
        cmd += " --pid-file=%s" % (os.path.join(self.param.tmpDir, "dnsmasq.pid"))
        self.dnsmasqProc = subprocess.Popen(cmd, shell=True, universal_newlines=True)

    def _stopDnsmasq(self):
        if self.dnsmasqProc is not None:
            self.dnsmasqProc.terminate()
            self.dnsmasqProc.wait()
            self.dnsmasqProc = None
        shutil.rmtree(os.path.join(self.param.tmpDir, "hosts.d"))


class WrtConfigWifiNetwork:

    def __init__(self):
        self.ssid = None
        self.password = None
